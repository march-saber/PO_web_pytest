{"name": "test_invest_1_success", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <testcase.test_invest.TestInvest object at 0x000002EBEEA4CB38>\nopen_invest_url = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"656f60d2d83d7903f13d0294a819062e\")>, <PageObjects.bid_page.BidPage object at 0x000002EBEEB981D0>)\n\n    @pytest.mark.smoke1\n    def test_invest_1_success(self,open_invest_url):\n        self.driver, self.bid_page = open_invest_url\n        logging.info(\"*********投资用例：正常场景-投资成功*********\")\n        # 投标页面 - 获取投资前的个人余额\n        userMoney_beforeInvset = self.bid_page.get_user_money()\n        # 投标页面-输入金额，点击投标\n        self.bid_page.invset(Ind.success[\"money\"])\n        # 标页面 - 投资成功弹出框 ，点击查看并激活按钮\n>       self.bid_page.click_activeButton_on_success_popup()\n\ntestcase\\test_invest.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPageObjects\\bid_page.py:19: in click_activeButton_on_success_popup\n    self.click_element(loc.active_button_on_successPop,\"投标页面_投资成功的提示框 - 点击查看并激活\")\nCommon\\basepage.py:48: in click_element\n    self.wait_eleVisible(loc,img_doc,timeout,frozenset)\nCommon\\basepage.py:24: in wait_eleVisible\n    WebDriverWait(self.driver,timeout,frequency).until(EC.visibility_of_element_located(loc))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"656f60d2d83d7903f13d0294a819062e\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x000002EBEF4AA2B0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nd:\\python\\python37\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException"}, "attachments": [{"name": "log", "source": "cf4c2d3e-41fc-4b85-8469-69fedb40f801-attachment.txt", "type": "text/plain"}], "start": 1608220230131, "stop": 1608220253402, "uuid": "2a05496c-1e60-4928-b9c7-783ca933f581", "historyId": "3fa87e1b4faf6bdec7defaf1ecb0cfc3", "testCaseId": "eff23d0777801e7255788758fa4d0307", "fullName": "testcase.test_invest.TestInvest#test_invest_1_success", "labels": [{"name": "tag", "value": "smoke1"}, {"name": "tag", "value": "@pytest.mark.usefixtures('refresh_invest_page')"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_invest"}, {"name": "subSuite", "value": "TestInvest"}, {"name": "host", "value": "DESKTOP-J6CF24D"}, {"name": "thread", "value": "50220-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_invest"}]}